#!/bin/sh /etc/rc.common
# Copyright (C) 2014 OpenWrt.org

# shellcheck disable=SC3043
# shellcheck disable=SC2034
# shellcheck disable=SC3037
# shellcheck disable=SC2154
# shellcheck disable=SC2129

START=20

USE_PROCD=1

UCI_CONF="rsyslog"
CONFIG_FILE="/var/etc/rsyslog.conf"
BASE_CONFIG_FILE="/etc/rsyslog.conf"

modules=""
selectors=""
forwarders=""
tls_config=""
remote_config=""

handle_tls() {
	local config="$1"
	local enabled
	local driver
	local ca_file

	config_get_bool enabled "${config}" enabled
	if [ "${enabled}" -eq 1 ]; then
		config_get driver "${config}" driver "ossl"
		config_get ca_file "${config}" ca_file

		# Add TLS network stream driver module based on driver type
		if [ "${driver}" = "ossl" ]; then
			if ! echo "${modules}" | grep -q "lmnsd_ossl"; then
				modules="${modules} lmnsd_ossl"
			fi
		elif [ "${driver}" = "gtls" ]; then
			if ! echo "${modules}" | grep -q "lmnsd_gtls"; then
				modules="${modules} lmnsd_gtls"
			fi
		fi

		# Use TLS configuration for anonymous authentication (client-side)
		tls_config="# TLS/SSL Configuration for Anonymous Authentication
global(
	DefaultNetstreamDriver=\"${driver}\"
	DefaultNetstreamDriverCAFile=\"${ca_file}\"
)
\$ActionSendStreamDriverAuthMode anon
\$ActionSendStreamDriverMode 1"
	fi
}

handle_remote_server() {
	local config="$1"
	local enabled
	local server_ip
	local server_port
	local protocol
	local use_tls
	local source_selector

	config_get_bool enabled "${config}" enabled
	if [ "${enabled}" -eq 1 ]; then
		config_get server_ip "${config}" server_ip
		config_get server_port "${config}" server_port "6514"
		config_get protocol "${config}" protocol "tcp"
		config_get_bool use_tls "${config}" use_tls
		config_get source_selector "${config}" source_selector "*.*"

		if [ -n "${server_ip}" ]; then
			if [ "${use_tls}" -eq 1 ]; then
				remote_config="${source_selector} @@(o)${server_ip}:${server_port}"
			else
				if [ "${protocol}" = "tcp" ]; then
					remote_config="${source_selector} @@${server_ip}:${server_port}"
				else
					remote_config="${source_selector} @${server_ip}:${server_port}"
				fi
			fi
		fi
	fi
}

handle_selector() {
	local config="$1"
	local src
	local dst

	config_get src "${config}" source
	config_get dst "${config}" destination
	if [ "${src}" != "" ] && [ "$dst" != "" ]; then
		selectors="${selectors}\n${src}\t${dst}\n"
	fi
}

handle_forwarder() {
	local config="$1"
	local src
	local target
	local protocol
	local port
	local rfc
	local opts

	config_get src "${config}" source
	config_get target "${config}" target
	config_get protocol "${config}" protocol "udp"
	config_get port "${config}" port "514"
	config_get rfc "${config}" rfc "3164"

	if [ "$rfc" = "5424" ]; then
		opts='Template="RSYSLOG_SyslogProtocol23Format" TCP_Framing="octet-counted"'
	fi

	if [ "${src}" != "" ] && [ "${target}" != "" ]; then
		action="action(type=\"omfwd\" target=\"$target\" port=\"$port\" protocol=\"$protocol\" $opts action.resumeRetryCount=\"100\" queue.type=\"linkedList\" queue.size=\"10000\")"
	   forwarders="${forwarders}\n${src}\t${action}\n"
	fi
}


expand_config() {
	local input_t=""
	local input_u=""

	config_load "${UCI_CONF}"
	# 新增：如果未启用，则跳过配置生成
	config_get_bool enabled syslog enabled 0
	if [ "${enabled}" -ne 1 ]; then
		return
	fi

	config_list_foreach syslog modules handle_module
	config_foreach handle_tls tls_settings
	config_foreach handle_remote_server remote_server
	
	config_get_bool tcp_input syslog tcp_input
	if [ "${tcp_input}" -eq 1 ]; then
		modules="${modules} imtcp"
		config_get tcp_port syslog tcp_input_port
		input_t="input(type=\"imtcp\" port=\"${tcp_port}\")"
	fi

	config_get_bool udp_input syslog udp_input
	if [ "${udp_input}" -eq 1 ]; then
		modules="${modules} imudp"
		config_get udp_port syslog udp_input_port
		input_u="input(type=\"imudp\" port=\"${udp_port}\")"

	fi
	config_get template syslog default_template
	config_foreach handle_selector selector
	config_foreach handle_forwarder forwarder

	mkdir -p "$(dirname ${CONFIG_FILE})"
	# shellcheck disable=SC2188
	> ${CONFIG_FILE}
	echo "include(file=\"${BASE_CONFIG_FILE}\" mode=\"optional\")" >> ${CONFIG_FILE}
	for m in ${modules}; do
		echo "module(load=\"${m}\")" >> ${CONFIG_FILE}
	done
	
	# Add TLS configuration if enabled
	if [ -n "${tls_config}" ]; then
		echo -e "${tls_config}" >> ${CONFIG_FILE}
	fi
	
	echo "${input_t}" >> ${CONFIG_FILE}
	echo "${input_u}" >> ${CONFIG_FILE}
	echo "\$ActionFileDefaultTemplate ${template}" >> ${CONFIG_FILE}
	echo -e "${selectors}" >> ${CONFIG_FILE}
	echo -e "${forwarders}" >> ${CONFIG_FILE}
	
	# Add remote server configuration if enabled
	if [ -n "${remote_config}" ]; then
		echo "${remote_config}" >> ${CONFIG_FILE}
	fi
}

handle_module() {
	local module="$1"
	modules="${modules} $module"
}

start_service() {
	expand_config
	procd_open_instance
	procd_set_param command /usr/sbin/rsyslogd -f ${CONFIG_FILE} -n
	procd_close_instance
}


service_triggers()
{
	procd_add_reload_trigger ${UCI_CONF}
}
